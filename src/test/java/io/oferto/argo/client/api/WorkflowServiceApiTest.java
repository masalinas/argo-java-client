/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/
 *
 * OpenAPI spec version: VERSION
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.oferto.argo.client.api;

import io.oferto.argo.client.api.WorkflowServiceApi;
import io.oferto.argo.client.model.GrpcGatewayRuntimeError;
import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1Workflow;
import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1WorkflowCreateRequest;
import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1WorkflowDeleteResponse;
import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1WorkflowLintRequest;
import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1WorkflowList;
import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest;
import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1WorkflowResumeRequest;
import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1WorkflowRetryRequest;
import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1WorkflowSetRequest;
import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1WorkflowStopRequest;
import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest;
import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest;
import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest;
import io.oferto.argo.client.model.StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry;
import io.oferto.argo.client.model.StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent;
import io.oferto.argo.client.model.StreamResultOfIoK8sApiCoreV1Event;

import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkflowServiceApi
 */
@Ignore
public class WorkflowServiceApiTest {

    private final WorkflowServiceApi api = new WorkflowServiceApi();

    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceCreateWorkflowTest() throws Exception {
        String namespace = null;
        IoArgoprojWorkflowV1alpha1WorkflowCreateRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.workflowServiceCreateWorkflow(namespace, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceDeleteWorkflowTest() throws Exception {
        String namespace = null;
        String name = null;
        String deleteOptionsGracePeriodSeconds = null;
        String deleteOptionsPreconditionsUid = null;
        String deleteOptionsPreconditionsResourceVersion = null;
        Boolean deleteOptionsOrphanDependents = null;
        String deleteOptionsPropagationPolicy = null;
        List<String> deleteOptionsDryRun = null;
        Boolean force = null;
        IoArgoprojWorkflowV1alpha1WorkflowDeleteResponse response = api.workflowServiceDeleteWorkflow(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceGetWorkflowTest() throws Exception {
        String namespace = null;
        String name = null;
        String getOptionsResourceVersion = null;
        String fields = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.workflowServiceGetWorkflow(namespace, name, getOptionsResourceVersion, fields);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceLintWorkflowTest() throws Exception {
        String namespace = null;
        IoArgoprojWorkflowV1alpha1WorkflowLintRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.workflowServiceLintWorkflow(namespace, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceListWorkflowsTest() throws Exception {
        String namespace = null;
        String listOptionsLabelSelector = null;
        String listOptionsFieldSelector = null;
        Boolean listOptionsWatch = null;
        Boolean listOptionsAllowWatchBookmarks = null;
        String listOptionsResourceVersion = null;
        String listOptionsResourceVersionMatch = null;
        String listOptionsTimeoutSeconds = null;
        String listOptionsLimit = null;
        String listOptionsContinue = null;
        String fields = null;
        IoArgoprojWorkflowV1alpha1WorkflowList response = api.workflowServiceListWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, fields);

        // TODO: test validations
    }
    
    /**
     * DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServicePodLogsTest() throws Exception {
        String namespace = null;
        String name = null;
        String podName = null;
        String logOptionsContainer = null;
        Boolean logOptionsFollow = null;
        Boolean logOptionsPrevious = null;
        String logOptionsSinceSeconds = null;
        String logOptionsSinceTimeSeconds = null;
        Integer logOptionsSinceTimeNanos = null;
        Boolean logOptionsTimestamps = null;
        String logOptionsTailLines = null;
        String logOptionsLimitBytes = null;
        Boolean logOptionsInsecureSkipTLSVerifyBackend = null;
        String grep = null;
        String selector = null;
        StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry response = api.workflowServicePodLogs(namespace, name, podName, logOptionsContainer, logOptionsFollow, logOptionsPrevious, logOptionsSinceSeconds, logOptionsSinceTimeSeconds, logOptionsSinceTimeNanos, logOptionsTimestamps, logOptionsTailLines, logOptionsLimitBytes, logOptionsInsecureSkipTLSVerifyBackend, grep, selector);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceResubmitWorkflowTest() throws Exception {
        String namespace = null;
        String name = null;
        IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.workflowServiceResubmitWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceResumeWorkflowTest() throws Exception {
        String namespace = null;
        String name = null;
        IoArgoprojWorkflowV1alpha1WorkflowResumeRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.workflowServiceResumeWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceRetryWorkflowTest() throws Exception {
        String namespace = null;
        String name = null;
        IoArgoprojWorkflowV1alpha1WorkflowRetryRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.workflowServiceRetryWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceSetWorkflowTest() throws Exception {
        String namespace = null;
        String name = null;
        IoArgoprojWorkflowV1alpha1WorkflowSetRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.workflowServiceSetWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceStopWorkflowTest() throws Exception {
        String namespace = null;
        String name = null;
        IoArgoprojWorkflowV1alpha1WorkflowStopRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.workflowServiceStopWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceSubmitWorkflowTest() throws Exception {
        String namespace = null;
        IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.workflowServiceSubmitWorkflow(namespace, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceSuspendWorkflowTest() throws Exception {
        String namespace = null;
        String name = null;
        IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.workflowServiceSuspendWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceTerminateWorkflowTest() throws Exception {
        String namespace = null;
        String name = null;
        IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest body = null;
        IoArgoprojWorkflowV1alpha1Workflow response = api.workflowServiceTerminateWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceWatchEventsTest() throws Exception {
        String namespace = null;
        String listOptionsLabelSelector = null;
        String listOptionsFieldSelector = null;
        Boolean listOptionsWatch = null;
        Boolean listOptionsAllowWatchBookmarks = null;
        String listOptionsResourceVersion = null;
        String listOptionsResourceVersionMatch = null;
        String listOptionsTimeoutSeconds = null;
        String listOptionsLimit = null;
        String listOptionsContinue = null;
        StreamResultOfIoK8sApiCoreV1Event response = api.workflowServiceWatchEvents(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceWatchWorkflowsTest() throws Exception {
        String namespace = null;
        String listOptionsLabelSelector = null;
        String listOptionsFieldSelector = null;
        Boolean listOptionsWatch = null;
        Boolean listOptionsAllowWatchBookmarks = null;
        String listOptionsResourceVersion = null;
        String listOptionsResourceVersionMatch = null;
        String listOptionsTimeoutSeconds = null;
        String listOptionsLimit = null;
        String listOptionsContinue = null;
        String fields = null;
        StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent response = api.workflowServiceWatchWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue, fields);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void workflowServiceWorkflowLogsTest() throws Exception {
        String namespace = null;
        String name = null;
        String podName = null;
        String logOptionsContainer = null;
        Boolean logOptionsFollow = null;
        Boolean logOptionsPrevious = null;
        String logOptionsSinceSeconds = null;
        String logOptionsSinceTimeSeconds = null;
        Integer logOptionsSinceTimeNanos = null;
        Boolean logOptionsTimestamps = null;
        String logOptionsTailLines = null;
        String logOptionsLimitBytes = null;
        Boolean logOptionsInsecureSkipTLSVerifyBackend = null;
        String grep = null;
        String selector = null;
        StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry response = api.workflowServiceWorkflowLogs(namespace, name, podName, logOptionsContainer, logOptionsFollow, logOptionsPrevious, logOptionsSinceSeconds, logOptionsSinceTimeSeconds, logOptionsSinceTimeNanos, logOptionsTimestamps, logOptionsTailLines, logOptionsLimitBytes, logOptionsInsecureSkipTLSVerifyBackend, grep, selector);

        // TODO: test validations
    }
    
}
