/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/
 *
 * OpenAPI spec version: VERSION
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.oferto.argo.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.oferto.argo.client.model.IoK8sApiCoreV1SecretKeySelector;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * GitArtifact is the location of an git artifact
 */
@ApiModel(description = "GitArtifact is the location of an git artifact")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-03-17T20:59:50.224Z")
public class IoArgoprojWorkflowV1alpha1GitArtifact {
  @SerializedName("branch")
  private String branch = null;

  @SerializedName("depth")
  private Integer depth = null;

  @SerializedName("disableSubmodules")
  private Boolean disableSubmodules = null;

  @SerializedName("fetch")
  private List<String> fetch = null;

  @SerializedName("insecureIgnoreHostKey")
  private Boolean insecureIgnoreHostKey = null;

  @SerializedName("passwordSecret")
  private IoK8sApiCoreV1SecretKeySelector passwordSecret = null;

  @SerializedName("repo")
  private String repo = null;

  @SerializedName("revision")
  private String revision = null;

  @SerializedName("singleBranch")
  private Boolean singleBranch = null;

  @SerializedName("sshPrivateKeySecret")
  private IoK8sApiCoreV1SecretKeySelector sshPrivateKeySecret = null;

  @SerializedName("usernameSecret")
  private IoK8sApiCoreV1SecretKeySelector usernameSecret = null;

  public IoArgoprojWorkflowV1alpha1GitArtifact branch(String branch) {
    this.branch = branch;
    return this;
  }

   /**
   * Branch is the branch to fetch when &#x60;SingleBranch&#x60; is enabled
   * @return branch
  **/
  @ApiModelProperty(value = "Branch is the branch to fetch when `SingleBranch` is enabled")
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }

  public IoArgoprojWorkflowV1alpha1GitArtifact depth(Integer depth) {
    this.depth = depth;
    return this;
  }

   /**
   * Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip
   * @return depth
  **/
  @ApiModelProperty(value = "Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip")
  public Integer getDepth() {
    return depth;
  }

  public void setDepth(Integer depth) {
    this.depth = depth;
  }

  public IoArgoprojWorkflowV1alpha1GitArtifact disableSubmodules(Boolean disableSubmodules) {
    this.disableSubmodules = disableSubmodules;
    return this;
  }

   /**
   * DisableSubmodules disables submodules during git clone
   * @return disableSubmodules
  **/
  @ApiModelProperty(value = "DisableSubmodules disables submodules during git clone")
  public Boolean isDisableSubmodules() {
    return disableSubmodules;
  }

  public void setDisableSubmodules(Boolean disableSubmodules) {
    this.disableSubmodules = disableSubmodules;
  }

  public IoArgoprojWorkflowV1alpha1GitArtifact fetch(List<String> fetch) {
    this.fetch = fetch;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1GitArtifact addFetchItem(String fetchItem) {
    if (this.fetch == null) {
      this.fetch = new ArrayList<String>();
    }
    this.fetch.add(fetchItem);
    return this;
  }

   /**
   * Fetch specifies a number of refs that should be fetched before checkout
   * @return fetch
  **/
  @ApiModelProperty(value = "Fetch specifies a number of refs that should be fetched before checkout")
  public List<String> getFetch() {
    return fetch;
  }

  public void setFetch(List<String> fetch) {
    this.fetch = fetch;
  }

  public IoArgoprojWorkflowV1alpha1GitArtifact insecureIgnoreHostKey(Boolean insecureIgnoreHostKey) {
    this.insecureIgnoreHostKey = insecureIgnoreHostKey;
    return this;
  }

   /**
   * InsecureIgnoreHostKey disables SSH strict host key checking during git clone
   * @return insecureIgnoreHostKey
  **/
  @ApiModelProperty(value = "InsecureIgnoreHostKey disables SSH strict host key checking during git clone")
  public Boolean isInsecureIgnoreHostKey() {
    return insecureIgnoreHostKey;
  }

  public void setInsecureIgnoreHostKey(Boolean insecureIgnoreHostKey) {
    this.insecureIgnoreHostKey = insecureIgnoreHostKey;
  }

  public IoArgoprojWorkflowV1alpha1GitArtifact passwordSecret(IoK8sApiCoreV1SecretKeySelector passwordSecret) {
    this.passwordSecret = passwordSecret;
    return this;
  }

   /**
   * PasswordSecret is the secret selector to the repository password
   * @return passwordSecret
  **/
  @ApiModelProperty(value = "PasswordSecret is the secret selector to the repository password")
  public IoK8sApiCoreV1SecretKeySelector getPasswordSecret() {
    return passwordSecret;
  }

  public void setPasswordSecret(IoK8sApiCoreV1SecretKeySelector passwordSecret) {
    this.passwordSecret = passwordSecret;
  }

  public IoArgoprojWorkflowV1alpha1GitArtifact repo(String repo) {
    this.repo = repo;
    return this;
  }

   /**
   * Repo is the git repository
   * @return repo
  **/
  @ApiModelProperty(required = true, value = "Repo is the git repository")
  public String getRepo() {
    return repo;
  }

  public void setRepo(String repo) {
    this.repo = repo;
  }

  public IoArgoprojWorkflowV1alpha1GitArtifact revision(String revision) {
    this.revision = revision;
    return this;
  }

   /**
   * Revision is the git commit, tag, branch to checkout
   * @return revision
  **/
  @ApiModelProperty(value = "Revision is the git commit, tag, branch to checkout")
  public String getRevision() {
    return revision;
  }

  public void setRevision(String revision) {
    this.revision = revision;
  }

  public IoArgoprojWorkflowV1alpha1GitArtifact singleBranch(Boolean singleBranch) {
    this.singleBranch = singleBranch;
    return this;
  }

   /**
   * SingleBranch enables single branch clone, using the &#x60;branch&#x60; parameter
   * @return singleBranch
  **/
  @ApiModelProperty(value = "SingleBranch enables single branch clone, using the `branch` parameter")
  public Boolean isSingleBranch() {
    return singleBranch;
  }

  public void setSingleBranch(Boolean singleBranch) {
    this.singleBranch = singleBranch;
  }

  public IoArgoprojWorkflowV1alpha1GitArtifact sshPrivateKeySecret(IoK8sApiCoreV1SecretKeySelector sshPrivateKeySecret) {
    this.sshPrivateKeySecret = sshPrivateKeySecret;
    return this;
  }

   /**
   * SSHPrivateKeySecret is the secret selector to the repository ssh private key
   * @return sshPrivateKeySecret
  **/
  @ApiModelProperty(value = "SSHPrivateKeySecret is the secret selector to the repository ssh private key")
  public IoK8sApiCoreV1SecretKeySelector getSshPrivateKeySecret() {
    return sshPrivateKeySecret;
  }

  public void setSshPrivateKeySecret(IoK8sApiCoreV1SecretKeySelector sshPrivateKeySecret) {
    this.sshPrivateKeySecret = sshPrivateKeySecret;
  }

  public IoArgoprojWorkflowV1alpha1GitArtifact usernameSecret(IoK8sApiCoreV1SecretKeySelector usernameSecret) {
    this.usernameSecret = usernameSecret;
    return this;
  }

   /**
   * UsernameSecret is the secret selector to the repository username
   * @return usernameSecret
  **/
  @ApiModelProperty(value = "UsernameSecret is the secret selector to the repository username")
  public IoK8sApiCoreV1SecretKeySelector getUsernameSecret() {
    return usernameSecret;
  }

  public void setUsernameSecret(IoK8sApiCoreV1SecretKeySelector usernameSecret) {
    this.usernameSecret = usernameSecret;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1GitArtifact ioArgoprojWorkflowV1alpha1GitArtifact = (IoArgoprojWorkflowV1alpha1GitArtifact) o;
    return Objects.equals(this.branch, ioArgoprojWorkflowV1alpha1GitArtifact.branch) &&
        Objects.equals(this.depth, ioArgoprojWorkflowV1alpha1GitArtifact.depth) &&
        Objects.equals(this.disableSubmodules, ioArgoprojWorkflowV1alpha1GitArtifact.disableSubmodules) &&
        Objects.equals(this.fetch, ioArgoprojWorkflowV1alpha1GitArtifact.fetch) &&
        Objects.equals(this.insecureIgnoreHostKey, ioArgoprojWorkflowV1alpha1GitArtifact.insecureIgnoreHostKey) &&
        Objects.equals(this.passwordSecret, ioArgoprojWorkflowV1alpha1GitArtifact.passwordSecret) &&
        Objects.equals(this.repo, ioArgoprojWorkflowV1alpha1GitArtifact.repo) &&
        Objects.equals(this.revision, ioArgoprojWorkflowV1alpha1GitArtifact.revision) &&
        Objects.equals(this.singleBranch, ioArgoprojWorkflowV1alpha1GitArtifact.singleBranch) &&
        Objects.equals(this.sshPrivateKeySecret, ioArgoprojWorkflowV1alpha1GitArtifact.sshPrivateKeySecret) &&
        Objects.equals(this.usernameSecret, ioArgoprojWorkflowV1alpha1GitArtifact.usernameSecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branch, depth, disableSubmodules, fetch, insecureIgnoreHostKey, passwordSecret, repo, revision, singleBranch, sshPrivateKeySecret, usernameSecret);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1GitArtifact {\n");
    
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    disableSubmodules: ").append(toIndentedString(disableSubmodules)).append("\n");
    sb.append("    fetch: ").append(toIndentedString(fetch)).append("\n");
    sb.append("    insecureIgnoreHostKey: ").append(toIndentedString(insecureIgnoreHostKey)).append("\n");
    sb.append("    passwordSecret: ").append(toIndentedString(passwordSecret)).append("\n");
    sb.append("    repo: ").append(toIndentedString(repo)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    singleBranch: ").append(toIndentedString(singleBranch)).append("\n");
    sb.append("    sshPrivateKeySecret: ").append(toIndentedString(sshPrivateKeySecret)).append("\n");
    sb.append("    usernameSecret: ").append(toIndentedString(usernameSecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

