/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/
 *
 * OpenAPI spec version: VERSION
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.oferto.argo.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1SemaphoreHolding;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * IoArgoprojWorkflowV1alpha1SemaphoreStatus
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-03-17T20:59:50.224Z")
public class IoArgoprojWorkflowV1alpha1SemaphoreStatus {
  @SerializedName("holding")
  private List<IoArgoprojWorkflowV1alpha1SemaphoreHolding> holding = null;

  @SerializedName("waiting")
  private List<IoArgoprojWorkflowV1alpha1SemaphoreHolding> waiting = null;

  public IoArgoprojWorkflowV1alpha1SemaphoreStatus holding(List<IoArgoprojWorkflowV1alpha1SemaphoreHolding> holding) {
    this.holding = holding;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1SemaphoreStatus addHoldingItem(IoArgoprojWorkflowV1alpha1SemaphoreHolding holdingItem) {
    if (this.holding == null) {
      this.holding = new ArrayList<IoArgoprojWorkflowV1alpha1SemaphoreHolding>();
    }
    this.holding.add(holdingItem);
    return this;
  }

   /**
   * Holding stores the list of resource acquired synchronization lock for workflows.
   * @return holding
  **/
  @ApiModelProperty(value = "Holding stores the list of resource acquired synchronization lock for workflows.")
  public List<IoArgoprojWorkflowV1alpha1SemaphoreHolding> getHolding() {
    return holding;
  }

  public void setHolding(List<IoArgoprojWorkflowV1alpha1SemaphoreHolding> holding) {
    this.holding = holding;
  }

  public IoArgoprojWorkflowV1alpha1SemaphoreStatus waiting(List<IoArgoprojWorkflowV1alpha1SemaphoreHolding> waiting) {
    this.waiting = waiting;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1SemaphoreStatus addWaitingItem(IoArgoprojWorkflowV1alpha1SemaphoreHolding waitingItem) {
    if (this.waiting == null) {
      this.waiting = new ArrayList<IoArgoprojWorkflowV1alpha1SemaphoreHolding>();
    }
    this.waiting.add(waitingItem);
    return this;
  }

   /**
   * Waiting indicates the list of current synchronization lock holders.
   * @return waiting
  **/
  @ApiModelProperty(value = "Waiting indicates the list of current synchronization lock holders.")
  public List<IoArgoprojWorkflowV1alpha1SemaphoreHolding> getWaiting() {
    return waiting;
  }

  public void setWaiting(List<IoArgoprojWorkflowV1alpha1SemaphoreHolding> waiting) {
    this.waiting = waiting;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1SemaphoreStatus ioArgoprojWorkflowV1alpha1SemaphoreStatus = (IoArgoprojWorkflowV1alpha1SemaphoreStatus) o;
    return Objects.equals(this.holding, ioArgoprojWorkflowV1alpha1SemaphoreStatus.holding) &&
        Objects.equals(this.waiting, ioArgoprojWorkflowV1alpha1SemaphoreStatus.waiting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(holding, waiting);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1SemaphoreStatus {\n");
    
    sb.append("    holding: ").append(toIndentedString(holding)).append("\n");
    sb.append("    waiting: ").append(toIndentedString(waiting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

