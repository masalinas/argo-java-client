/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/
 *
 * OpenAPI spec version: VERSION
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.oferto.argo.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.oferto.argo.client.model.IoArgoprojEventsV1alpha1GitCreds;
import io.oferto.argo.client.model.IoArgoprojEventsV1alpha1GitRemoteConfig;
import io.oferto.argo.client.model.IoK8sApiCoreV1SecretKeySelector;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;

/**
 * IoArgoprojEventsV1alpha1GitArtifact
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-03-17T20:59:50.224Z")
public class IoArgoprojEventsV1alpha1GitArtifact {
  @SerializedName("branch")
  private String branch = null;

  @SerializedName("cloneDirectory")
  private String cloneDirectory = null;

  @SerializedName("creds")
  private IoArgoprojEventsV1alpha1GitCreds creds = null;

  @SerializedName("filePath")
  private String filePath = null;

  @SerializedName("insecureIgnoreHostKey")
  private Boolean insecureIgnoreHostKey = null;

  @SerializedName("ref")
  private String ref = null;

  @SerializedName("remote")
  private IoArgoprojEventsV1alpha1GitRemoteConfig remote = null;

  @SerializedName("sshKeySecret")
  private IoK8sApiCoreV1SecretKeySelector sshKeySecret = null;

  @SerializedName("tag")
  private String tag = null;

  @SerializedName("url")
  private String url = null;

  public IoArgoprojEventsV1alpha1GitArtifact branch(String branch) {
    this.branch = branch;
    return this;
  }

   /**
   * Get branch
   * @return branch
  **/
  @ApiModelProperty(value = "")
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }

  public IoArgoprojEventsV1alpha1GitArtifact cloneDirectory(String cloneDirectory) {
    this.cloneDirectory = cloneDirectory;
    return this;
  }

   /**
   * Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don&#39;t use any specific git provider client.
   * @return cloneDirectory
  **/
  @ApiModelProperty(value = "Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don't use any specific git provider client.")
  public String getCloneDirectory() {
    return cloneDirectory;
  }

  public void setCloneDirectory(String cloneDirectory) {
    this.cloneDirectory = cloneDirectory;
  }

  public IoArgoprojEventsV1alpha1GitArtifact creds(IoArgoprojEventsV1alpha1GitCreds creds) {
    this.creds = creds;
    return this;
  }

   /**
   * Get creds
   * @return creds
  **/
  @ApiModelProperty(value = "")
  public IoArgoprojEventsV1alpha1GitCreds getCreds() {
    return creds;
  }

  public void setCreds(IoArgoprojEventsV1alpha1GitCreds creds) {
    this.creds = creds;
  }

  public IoArgoprojEventsV1alpha1GitArtifact filePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

   /**
   * Get filePath
   * @return filePath
  **/
  @ApiModelProperty(value = "")
  public String getFilePath() {
    return filePath;
  }

  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }

  public IoArgoprojEventsV1alpha1GitArtifact insecureIgnoreHostKey(Boolean insecureIgnoreHostKey) {
    this.insecureIgnoreHostKey = insecureIgnoreHostKey;
    return this;
  }

   /**
   * Get insecureIgnoreHostKey
   * @return insecureIgnoreHostKey
  **/
  @ApiModelProperty(value = "")
  public Boolean isInsecureIgnoreHostKey() {
    return insecureIgnoreHostKey;
  }

  public void setInsecureIgnoreHostKey(Boolean insecureIgnoreHostKey) {
    this.insecureIgnoreHostKey = insecureIgnoreHostKey;
  }

  public IoArgoprojEventsV1alpha1GitArtifact ref(String ref) {
    this.ref = ref;
    return this;
  }

   /**
   * Get ref
   * @return ref
  **/
  @ApiModelProperty(value = "")
  public String getRef() {
    return ref;
  }

  public void setRef(String ref) {
    this.ref = ref;
  }

  public IoArgoprojEventsV1alpha1GitArtifact remote(IoArgoprojEventsV1alpha1GitRemoteConfig remote) {
    this.remote = remote;
    return this;
  }

   /**
   * Get remote
   * @return remote
  **/
  @ApiModelProperty(value = "")
  public IoArgoprojEventsV1alpha1GitRemoteConfig getRemote() {
    return remote;
  }

  public void setRemote(IoArgoprojEventsV1alpha1GitRemoteConfig remote) {
    this.remote = remote;
  }

  public IoArgoprojEventsV1alpha1GitArtifact sshKeySecret(IoK8sApiCoreV1SecretKeySelector sshKeySecret) {
    this.sshKeySecret = sshKeySecret;
    return this;
  }

   /**
   * Get sshKeySecret
   * @return sshKeySecret
  **/
  @ApiModelProperty(value = "")
  public IoK8sApiCoreV1SecretKeySelector getSshKeySecret() {
    return sshKeySecret;
  }

  public void setSshKeySecret(IoK8sApiCoreV1SecretKeySelector sshKeySecret) {
    this.sshKeySecret = sshKeySecret;
  }

  public IoArgoprojEventsV1alpha1GitArtifact tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * Get tag
   * @return tag
  **/
  @ApiModelProperty(value = "")
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  public IoArgoprojEventsV1alpha1GitArtifact url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @ApiModelProperty(value = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1GitArtifact ioArgoprojEventsV1alpha1GitArtifact = (IoArgoprojEventsV1alpha1GitArtifact) o;
    return Objects.equals(this.branch, ioArgoprojEventsV1alpha1GitArtifact.branch) &&
        Objects.equals(this.cloneDirectory, ioArgoprojEventsV1alpha1GitArtifact.cloneDirectory) &&
        Objects.equals(this.creds, ioArgoprojEventsV1alpha1GitArtifact.creds) &&
        Objects.equals(this.filePath, ioArgoprojEventsV1alpha1GitArtifact.filePath) &&
        Objects.equals(this.insecureIgnoreHostKey, ioArgoprojEventsV1alpha1GitArtifact.insecureIgnoreHostKey) &&
        Objects.equals(this.ref, ioArgoprojEventsV1alpha1GitArtifact.ref) &&
        Objects.equals(this.remote, ioArgoprojEventsV1alpha1GitArtifact.remote) &&
        Objects.equals(this.sshKeySecret, ioArgoprojEventsV1alpha1GitArtifact.sshKeySecret) &&
        Objects.equals(this.tag, ioArgoprojEventsV1alpha1GitArtifact.tag) &&
        Objects.equals(this.url, ioArgoprojEventsV1alpha1GitArtifact.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branch, cloneDirectory, creds, filePath, insecureIgnoreHostKey, ref, remote, sshKeySecret, tag, url);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1GitArtifact {\n");
    
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    cloneDirectory: ").append(toIndentedString(cloneDirectory)).append("\n");
    sb.append("    creds: ").append(toIndentedString(creds)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    insecureIgnoreHostKey: ").append(toIndentedString(insecureIgnoreHostKey)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    remote: ").append(toIndentedString(remote)).append("\n");
    sb.append("    sshKeySecret: ").append(toIndentedString(sshKeySecret)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

