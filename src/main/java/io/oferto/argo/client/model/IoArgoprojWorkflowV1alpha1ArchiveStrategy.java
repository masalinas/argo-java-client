/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/
 *
 * OpenAPI spec version: VERSION
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.oferto.argo.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1NoneStrategy;
import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1TarStrategy;
import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1ZipStrategy;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;

/**
 * ArchiveStrategy describes how to archive files/directory when saving artifacts
 */
@ApiModel(description = "ArchiveStrategy describes how to archive files/directory when saving artifacts")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-03-17T20:59:50.224Z")
public class IoArgoprojWorkflowV1alpha1ArchiveStrategy {
  @SerializedName("none")
  private IoArgoprojWorkflowV1alpha1NoneStrategy none = null;

  @SerializedName("tar")
  private IoArgoprojWorkflowV1alpha1TarStrategy tar = null;

  @SerializedName("zip")
  private IoArgoprojWorkflowV1alpha1ZipStrategy zip = null;

  public IoArgoprojWorkflowV1alpha1ArchiveStrategy none(IoArgoprojWorkflowV1alpha1NoneStrategy none) {
    this.none = none;
    return this;
  }

   /**
   * Get none
   * @return none
  **/
  @ApiModelProperty(value = "")
  public IoArgoprojWorkflowV1alpha1NoneStrategy getNone() {
    return none;
  }

  public void setNone(IoArgoprojWorkflowV1alpha1NoneStrategy none) {
    this.none = none;
  }

  public IoArgoprojWorkflowV1alpha1ArchiveStrategy tar(IoArgoprojWorkflowV1alpha1TarStrategy tar) {
    this.tar = tar;
    return this;
  }

   /**
   * Get tar
   * @return tar
  **/
  @ApiModelProperty(value = "")
  public IoArgoprojWorkflowV1alpha1TarStrategy getTar() {
    return tar;
  }

  public void setTar(IoArgoprojWorkflowV1alpha1TarStrategy tar) {
    this.tar = tar;
  }

  public IoArgoprojWorkflowV1alpha1ArchiveStrategy zip(IoArgoprojWorkflowV1alpha1ZipStrategy zip) {
    this.zip = zip;
    return this;
  }

   /**
   * Get zip
   * @return zip
  **/
  @ApiModelProperty(value = "")
  public IoArgoprojWorkflowV1alpha1ZipStrategy getZip() {
    return zip;
  }

  public void setZip(IoArgoprojWorkflowV1alpha1ZipStrategy zip) {
    this.zip = zip;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1ArchiveStrategy ioArgoprojWorkflowV1alpha1ArchiveStrategy = (IoArgoprojWorkflowV1alpha1ArchiveStrategy) o;
    return Objects.equals(this.none, ioArgoprojWorkflowV1alpha1ArchiveStrategy.none) &&
        Objects.equals(this.tar, ioArgoprojWorkflowV1alpha1ArchiveStrategy.tar) &&
        Objects.equals(this.zip, ioArgoprojWorkflowV1alpha1ArchiveStrategy.zip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(none, tar, zip);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1ArchiveStrategy {\n");
    
    sb.append("    none: ").append(toIndentedString(none)).append("\n");
    sb.append("    tar: ").append(toIndentedString(tar)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

