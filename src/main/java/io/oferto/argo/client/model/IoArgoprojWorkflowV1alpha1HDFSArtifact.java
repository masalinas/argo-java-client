/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/
 *
 * OpenAPI spec version: VERSION
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.oferto.argo.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.oferto.argo.client.model.IoK8sApiCoreV1ConfigMapKeySelector;
import io.oferto.argo.client.model.IoK8sApiCoreV1SecretKeySelector;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * HDFSArtifact is the location of an HDFS artifact
 */
@ApiModel(description = "HDFSArtifact is the location of an HDFS artifact")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-03-17T20:59:50.224Z")
public class IoArgoprojWorkflowV1alpha1HDFSArtifact {
  @SerializedName("addresses")
  private List<String> addresses = null;

  @SerializedName("force")
  private Boolean force = null;

  @SerializedName("hdfsUser")
  private String hdfsUser = null;

  @SerializedName("krbCCacheSecret")
  private IoK8sApiCoreV1SecretKeySelector krbCCacheSecret = null;

  @SerializedName("krbConfigConfigMap")
  private IoK8sApiCoreV1ConfigMapKeySelector krbConfigConfigMap = null;

  @SerializedName("krbKeytabSecret")
  private IoK8sApiCoreV1SecretKeySelector krbKeytabSecret = null;

  @SerializedName("krbRealm")
  private String krbRealm = null;

  @SerializedName("krbServicePrincipalName")
  private String krbServicePrincipalName = null;

  @SerializedName("krbUsername")
  private String krbUsername = null;

  @SerializedName("path")
  private String path = null;

  public IoArgoprojWorkflowV1alpha1HDFSArtifact addresses(List<String> addresses) {
    this.addresses = addresses;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1HDFSArtifact addAddressesItem(String addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<String>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * Addresses is accessible addresses of HDFS name nodes
   * @return addresses
  **/
  @ApiModelProperty(value = "Addresses is accessible addresses of HDFS name nodes")
  public List<String> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<String> addresses) {
    this.addresses = addresses;
  }

  public IoArgoprojWorkflowV1alpha1HDFSArtifact force(Boolean force) {
    this.force = force;
    return this;
  }

   /**
   * Force copies a file forcibly even if it exists
   * @return force
  **/
  @ApiModelProperty(value = "Force copies a file forcibly even if it exists")
  public Boolean isForce() {
    return force;
  }

  public void setForce(Boolean force) {
    this.force = force;
  }

  public IoArgoprojWorkflowV1alpha1HDFSArtifact hdfsUser(String hdfsUser) {
    this.hdfsUser = hdfsUser;
    return this;
  }

   /**
   * HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.
   * @return hdfsUser
  **/
  @ApiModelProperty(value = "HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.")
  public String getHdfsUser() {
    return hdfsUser;
  }

  public void setHdfsUser(String hdfsUser) {
    this.hdfsUser = hdfsUser;
  }

  public IoArgoprojWorkflowV1alpha1HDFSArtifact krbCCacheSecret(IoK8sApiCoreV1SecretKeySelector krbCCacheSecret) {
    this.krbCCacheSecret = krbCCacheSecret;
    return this;
  }

   /**
   * KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.
   * @return krbCCacheSecret
  **/
  @ApiModelProperty(value = "KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.")
  public IoK8sApiCoreV1SecretKeySelector getKrbCCacheSecret() {
    return krbCCacheSecret;
  }

  public void setKrbCCacheSecret(IoK8sApiCoreV1SecretKeySelector krbCCacheSecret) {
    this.krbCCacheSecret = krbCCacheSecret;
  }

  public IoArgoprojWorkflowV1alpha1HDFSArtifact krbConfigConfigMap(IoK8sApiCoreV1ConfigMapKeySelector krbConfigConfigMap) {
    this.krbConfigConfigMap = krbConfigConfigMap;
    return this;
  }

   /**
   * KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.
   * @return krbConfigConfigMap
  **/
  @ApiModelProperty(value = "KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.")
  public IoK8sApiCoreV1ConfigMapKeySelector getKrbConfigConfigMap() {
    return krbConfigConfigMap;
  }

  public void setKrbConfigConfigMap(IoK8sApiCoreV1ConfigMapKeySelector krbConfigConfigMap) {
    this.krbConfigConfigMap = krbConfigConfigMap;
  }

  public IoArgoprojWorkflowV1alpha1HDFSArtifact krbKeytabSecret(IoK8sApiCoreV1SecretKeySelector krbKeytabSecret) {
    this.krbKeytabSecret = krbKeytabSecret;
    return this;
  }

   /**
   * KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.
   * @return krbKeytabSecret
  **/
  @ApiModelProperty(value = "KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.")
  public IoK8sApiCoreV1SecretKeySelector getKrbKeytabSecret() {
    return krbKeytabSecret;
  }

  public void setKrbKeytabSecret(IoK8sApiCoreV1SecretKeySelector krbKeytabSecret) {
    this.krbKeytabSecret = krbKeytabSecret;
  }

  public IoArgoprojWorkflowV1alpha1HDFSArtifact krbRealm(String krbRealm) {
    this.krbRealm = krbRealm;
    return this;
  }

   /**
   * KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.
   * @return krbRealm
  **/
  @ApiModelProperty(value = "KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.")
  public String getKrbRealm() {
    return krbRealm;
  }

  public void setKrbRealm(String krbRealm) {
    this.krbRealm = krbRealm;
  }

  public IoArgoprojWorkflowV1alpha1HDFSArtifact krbServicePrincipalName(String krbServicePrincipalName) {
    this.krbServicePrincipalName = krbServicePrincipalName;
    return this;
  }

   /**
   * KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.
   * @return krbServicePrincipalName
  **/
  @ApiModelProperty(value = "KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.")
  public String getKrbServicePrincipalName() {
    return krbServicePrincipalName;
  }

  public void setKrbServicePrincipalName(String krbServicePrincipalName) {
    this.krbServicePrincipalName = krbServicePrincipalName;
  }

  public IoArgoprojWorkflowV1alpha1HDFSArtifact krbUsername(String krbUsername) {
    this.krbUsername = krbUsername;
    return this;
  }

   /**
   * KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.
   * @return krbUsername
  **/
  @ApiModelProperty(value = "KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.")
  public String getKrbUsername() {
    return krbUsername;
  }

  public void setKrbUsername(String krbUsername) {
    this.krbUsername = krbUsername;
  }

  public IoArgoprojWorkflowV1alpha1HDFSArtifact path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Path is a file path in HDFS
   * @return path
  **/
  @ApiModelProperty(required = true, value = "Path is a file path in HDFS")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1HDFSArtifact ioArgoprojWorkflowV1alpha1HDFSArtifact = (IoArgoprojWorkflowV1alpha1HDFSArtifact) o;
    return Objects.equals(this.addresses, ioArgoprojWorkflowV1alpha1HDFSArtifact.addresses) &&
        Objects.equals(this.force, ioArgoprojWorkflowV1alpha1HDFSArtifact.force) &&
        Objects.equals(this.hdfsUser, ioArgoprojWorkflowV1alpha1HDFSArtifact.hdfsUser) &&
        Objects.equals(this.krbCCacheSecret, ioArgoprojWorkflowV1alpha1HDFSArtifact.krbCCacheSecret) &&
        Objects.equals(this.krbConfigConfigMap, ioArgoprojWorkflowV1alpha1HDFSArtifact.krbConfigConfigMap) &&
        Objects.equals(this.krbKeytabSecret, ioArgoprojWorkflowV1alpha1HDFSArtifact.krbKeytabSecret) &&
        Objects.equals(this.krbRealm, ioArgoprojWorkflowV1alpha1HDFSArtifact.krbRealm) &&
        Objects.equals(this.krbServicePrincipalName, ioArgoprojWorkflowV1alpha1HDFSArtifact.krbServicePrincipalName) &&
        Objects.equals(this.krbUsername, ioArgoprojWorkflowV1alpha1HDFSArtifact.krbUsername) &&
        Objects.equals(this.path, ioArgoprojWorkflowV1alpha1HDFSArtifact.path);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addresses, force, hdfsUser, krbCCacheSecret, krbConfigConfigMap, krbKeytabSecret, krbRealm, krbServicePrincipalName, krbUsername, path);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1HDFSArtifact {\n");
    
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    force: ").append(toIndentedString(force)).append("\n");
    sb.append("    hdfsUser: ").append(toIndentedString(hdfsUser)).append("\n");
    sb.append("    krbCCacheSecret: ").append(toIndentedString(krbCCacheSecret)).append("\n");
    sb.append("    krbConfigConfigMap: ").append(toIndentedString(krbConfigConfigMap)).append("\n");
    sb.append("    krbKeytabSecret: ").append(toIndentedString(krbKeytabSecret)).append("\n");
    sb.append("    krbRealm: ").append(toIndentedString(krbRealm)).append("\n");
    sb.append("    krbServicePrincipalName: ").append(toIndentedString(krbServicePrincipalName)).append("\n");
    sb.append("    krbUsername: ").append(toIndentedString(krbUsername)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

