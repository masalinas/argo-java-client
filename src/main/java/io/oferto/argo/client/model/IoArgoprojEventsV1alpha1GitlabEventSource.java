/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/
 *
 * OpenAPI spec version: VERSION
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.oferto.argo.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.oferto.argo.client.model.IoArgoprojEventsV1alpha1EventSourceFilter;
import io.oferto.argo.client.model.IoArgoprojEventsV1alpha1WebhookContext;
import io.oferto.argo.client.model.IoK8sApiCoreV1SecretKeySelector;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * IoArgoprojEventsV1alpha1GitlabEventSource
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-03-17T20:59:50.224Z")
public class IoArgoprojEventsV1alpha1GitlabEventSource {
  @SerializedName("accessToken")
  private IoK8sApiCoreV1SecretKeySelector accessToken = null;

  @SerializedName("deleteHookOnFinish")
  private Boolean deleteHookOnFinish = null;

  @SerializedName("enableSSLVerification")
  private Boolean enableSSLVerification = null;

  @SerializedName("events")
  private List<String> events = null;

  @SerializedName("filter")
  private IoArgoprojEventsV1alpha1EventSourceFilter filter = null;

  @SerializedName("gitlabBaseURL")
  private String gitlabBaseURL = null;

  @SerializedName("metadata")
  private Map<String, String> metadata = null;

  @SerializedName("projectID")
  private String projectID = null;

  @SerializedName("projects")
  private List<String> projects = null;

  @SerializedName("secretToken")
  private IoK8sApiCoreV1SecretKeySelector secretToken = null;

  @SerializedName("webhook")
  private IoArgoprojEventsV1alpha1WebhookContext webhook = null;

  public IoArgoprojEventsV1alpha1GitlabEventSource accessToken(IoK8sApiCoreV1SecretKeySelector accessToken) {
    this.accessToken = accessToken;
    return this;
  }

   /**
   * Get accessToken
   * @return accessToken
  **/
  @ApiModelProperty(value = "")
  public IoK8sApiCoreV1SecretKeySelector getAccessToken() {
    return accessToken;
  }

  public void setAccessToken(IoK8sApiCoreV1SecretKeySelector accessToken) {
    this.accessToken = accessToken;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource deleteHookOnFinish(Boolean deleteHookOnFinish) {
    this.deleteHookOnFinish = deleteHookOnFinish;
    return this;
  }

   /**
   * Get deleteHookOnFinish
   * @return deleteHookOnFinish
  **/
  @ApiModelProperty(value = "")
  public Boolean isDeleteHookOnFinish() {
    return deleteHookOnFinish;
  }

  public void setDeleteHookOnFinish(Boolean deleteHookOnFinish) {
    this.deleteHookOnFinish = deleteHookOnFinish;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource enableSSLVerification(Boolean enableSSLVerification) {
    this.enableSSLVerification = enableSSLVerification;
    return this;
  }

   /**
   * Get enableSSLVerification
   * @return enableSSLVerification
  **/
  @ApiModelProperty(value = "")
  public Boolean isEnableSSLVerification() {
    return enableSSLVerification;
  }

  public void setEnableSSLVerification(Boolean enableSSLVerification) {
    this.enableSSLVerification = enableSSLVerification;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource events(List<String> events) {
    this.events = events;
    return this;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource addEventsItem(String eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<String>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Events are gitlab event to listen to. Refer https://github.com/xanzy/go-gitlab/blob/bf34eca5d13a9f4c3f501d8a97b8ac226d55e4d9/projects.go#L794.
   * @return events
  **/
  @ApiModelProperty(value = "Events are gitlab event to listen to. Refer https://github.com/xanzy/go-gitlab/blob/bf34eca5d13a9f4c3f501d8a97b8ac226d55e4d9/projects.go#L794.")
  public List<String> getEvents() {
    return events;
  }

  public void setEvents(List<String> events) {
    this.events = events;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource filter(IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @ApiModelProperty(value = "")
  public IoArgoprojEventsV1alpha1EventSourceFilter getFilter() {
    return filter;
  }

  public void setFilter(IoArgoprojEventsV1alpha1EventSourceFilter filter) {
    this.filter = filter;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource gitlabBaseURL(String gitlabBaseURL) {
    this.gitlabBaseURL = gitlabBaseURL;
    return this;
  }

   /**
   * Get gitlabBaseURL
   * @return gitlabBaseURL
  **/
  @ApiModelProperty(value = "")
  public String getGitlabBaseURL() {
    return gitlabBaseURL;
  }

  public void setGitlabBaseURL(String gitlabBaseURL) {
    this.gitlabBaseURL = gitlabBaseURL;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<String, String>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource projectID(String projectID) {
    this.projectID = projectID;
    return this;
  }

   /**
   * Get projectID
   * @return projectID
  **/
  @ApiModelProperty(value = "")
  public String getProjectID() {
    return projectID;
  }

  public void setProjectID(String projectID) {
    this.projectID = projectID;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource projects(List<String> projects) {
    this.projects = projects;
    return this;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource addProjectsItem(String projectsItem) {
    if (this.projects == null) {
      this.projects = new ArrayList<String>();
    }
    this.projects.add(projectsItem);
    return this;
  }

   /**
   * Get projects
   * @return projects
  **/
  @ApiModelProperty(value = "")
  public List<String> getProjects() {
    return projects;
  }

  public void setProjects(List<String> projects) {
    this.projects = projects;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource secretToken(IoK8sApiCoreV1SecretKeySelector secretToken) {
    this.secretToken = secretToken;
    return this;
  }

   /**
   * Get secretToken
   * @return secretToken
  **/
  @ApiModelProperty(value = "")
  public IoK8sApiCoreV1SecretKeySelector getSecretToken() {
    return secretToken;
  }

  public void setSecretToken(IoK8sApiCoreV1SecretKeySelector secretToken) {
    this.secretToken = secretToken;
  }

  public IoArgoprojEventsV1alpha1GitlabEventSource webhook(IoArgoprojEventsV1alpha1WebhookContext webhook) {
    this.webhook = webhook;
    return this;
  }

   /**
   * Get webhook
   * @return webhook
  **/
  @ApiModelProperty(value = "")
  public IoArgoprojEventsV1alpha1WebhookContext getWebhook() {
    return webhook;
  }

  public void setWebhook(IoArgoprojEventsV1alpha1WebhookContext webhook) {
    this.webhook = webhook;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojEventsV1alpha1GitlabEventSource ioArgoprojEventsV1alpha1GitlabEventSource = (IoArgoprojEventsV1alpha1GitlabEventSource) o;
    return Objects.equals(this.accessToken, ioArgoprojEventsV1alpha1GitlabEventSource.accessToken) &&
        Objects.equals(this.deleteHookOnFinish, ioArgoprojEventsV1alpha1GitlabEventSource.deleteHookOnFinish) &&
        Objects.equals(this.enableSSLVerification, ioArgoprojEventsV1alpha1GitlabEventSource.enableSSLVerification) &&
        Objects.equals(this.events, ioArgoprojEventsV1alpha1GitlabEventSource.events) &&
        Objects.equals(this.filter, ioArgoprojEventsV1alpha1GitlabEventSource.filter) &&
        Objects.equals(this.gitlabBaseURL, ioArgoprojEventsV1alpha1GitlabEventSource.gitlabBaseURL) &&
        Objects.equals(this.metadata, ioArgoprojEventsV1alpha1GitlabEventSource.metadata) &&
        Objects.equals(this.projectID, ioArgoprojEventsV1alpha1GitlabEventSource.projectID) &&
        Objects.equals(this.projects, ioArgoprojEventsV1alpha1GitlabEventSource.projects) &&
        Objects.equals(this.secretToken, ioArgoprojEventsV1alpha1GitlabEventSource.secretToken) &&
        Objects.equals(this.webhook, ioArgoprojEventsV1alpha1GitlabEventSource.webhook);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessToken, deleteHookOnFinish, enableSSLVerification, events, filter, gitlabBaseURL, metadata, projectID, projects, secretToken, webhook);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojEventsV1alpha1GitlabEventSource {\n");
    
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    deleteHookOnFinish: ").append(toIndentedString(deleteHookOnFinish)).append("\n");
    sb.append("    enableSSLVerification: ").append(toIndentedString(enableSSLVerification)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    gitlabBaseURL: ").append(toIndentedString(gitlabBaseURL)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    projectID: ").append(toIndentedString(projectID)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    secretToken: ").append(toIndentedString(secretToken)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

