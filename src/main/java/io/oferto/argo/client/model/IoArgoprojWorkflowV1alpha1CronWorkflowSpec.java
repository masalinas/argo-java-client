/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/
 *
 * OpenAPI spec version: VERSION
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.oferto.argo.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.oferto.argo.client.model.IoArgoprojWorkflowV1alpha1WorkflowSpec;
import io.oferto.argo.client.model.IoK8sApimachineryPkgApisMetaV1ObjectMeta;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;

/**
 * CronWorkflowSpec is the specification of a CronWorkflow
 */
@ApiModel(description = "CronWorkflowSpec is the specification of a CronWorkflow")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-03-17T20:59:50.224Z")
public class IoArgoprojWorkflowV1alpha1CronWorkflowSpec {
  @SerializedName("concurrencyPolicy")
  private String concurrencyPolicy = null;

  @SerializedName("failedJobsHistoryLimit")
  private Integer failedJobsHistoryLimit = null;

  @SerializedName("schedule")
  private String schedule = null;

  @SerializedName("startingDeadlineSeconds")
  private Integer startingDeadlineSeconds = null;

  @SerializedName("successfulJobsHistoryLimit")
  private Integer successfulJobsHistoryLimit = null;

  @SerializedName("suspend")
  private Boolean suspend = null;

  @SerializedName("timezone")
  private String timezone = null;

  @SerializedName("workflowMetadata")
  private IoK8sApimachineryPkgApisMetaV1ObjectMeta workflowMetadata = null;

  @SerializedName("workflowSpec")
  private IoArgoprojWorkflowV1alpha1WorkflowSpec workflowSpec = null;

  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec concurrencyPolicy(String concurrencyPolicy) {
    this.concurrencyPolicy = concurrencyPolicy;
    return this;
  }

   /**
   * ConcurrencyPolicy is the K8s-style concurrency policy that will be used
   * @return concurrencyPolicy
  **/
  @ApiModelProperty(value = "ConcurrencyPolicy is the K8s-style concurrency policy that will be used")
  public String getConcurrencyPolicy() {
    return concurrencyPolicy;
  }

  public void setConcurrencyPolicy(String concurrencyPolicy) {
    this.concurrencyPolicy = concurrencyPolicy;
  }

  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec failedJobsHistoryLimit(Integer failedJobsHistoryLimit) {
    this.failedJobsHistoryLimit = failedJobsHistoryLimit;
    return this;
  }

   /**
   * FailedJobsHistoryLimit is the number of failed jobs to be kept at a time
   * @return failedJobsHistoryLimit
  **/
  @ApiModelProperty(value = "FailedJobsHistoryLimit is the number of failed jobs to be kept at a time")
  public Integer getFailedJobsHistoryLimit() {
    return failedJobsHistoryLimit;
  }

  public void setFailedJobsHistoryLimit(Integer failedJobsHistoryLimit) {
    this.failedJobsHistoryLimit = failedJobsHistoryLimit;
  }

  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

   /**
   * Schedule is a schedule to run the Workflow in Cron format
   * @return schedule
  **/
  @ApiModelProperty(required = true, value = "Schedule is a schedule to run the Workflow in Cron format")
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }

  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec startingDeadlineSeconds(Integer startingDeadlineSeconds) {
    this.startingDeadlineSeconds = startingDeadlineSeconds;
    return this;
  }

   /**
   * StartingDeadlineSeconds is the K8s-style deadline that will limit the time a CronWorkflow will be run after its original scheduled time if it is missed.
   * @return startingDeadlineSeconds
  **/
  @ApiModelProperty(value = "StartingDeadlineSeconds is the K8s-style deadline that will limit the time a CronWorkflow will be run after its original scheduled time if it is missed.")
  public Integer getStartingDeadlineSeconds() {
    return startingDeadlineSeconds;
  }

  public void setStartingDeadlineSeconds(Integer startingDeadlineSeconds) {
    this.startingDeadlineSeconds = startingDeadlineSeconds;
  }

  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec successfulJobsHistoryLimit(Integer successfulJobsHistoryLimit) {
    this.successfulJobsHistoryLimit = successfulJobsHistoryLimit;
    return this;
  }

   /**
   * SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time
   * @return successfulJobsHistoryLimit
  **/
  @ApiModelProperty(value = "SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time")
  public Integer getSuccessfulJobsHistoryLimit() {
    return successfulJobsHistoryLimit;
  }

  public void setSuccessfulJobsHistoryLimit(Integer successfulJobsHistoryLimit) {
    this.successfulJobsHistoryLimit = successfulJobsHistoryLimit;
  }

  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec suspend(Boolean suspend) {
    this.suspend = suspend;
    return this;
  }

   /**
   * Suspend is a flag that will stop new CronWorkflows from running if set to true
   * @return suspend
  **/
  @ApiModelProperty(value = "Suspend is a flag that will stop new CronWorkflows from running if set to true")
  public Boolean isSuspend() {
    return suspend;
  }

  public void setSuspend(Boolean suspend) {
    this.suspend = suspend;
  }

  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

   /**
   * Timezone is the timezone against which the cron schedule will be calculated, e.g. \&quot;Asia/Tokyo\&quot;. Default is machine&#39;s local time.
   * @return timezone
  **/
  @ApiModelProperty(value = "Timezone is the timezone against which the cron schedule will be calculated, e.g. \"Asia/Tokyo\". Default is machine's local time.")
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }

  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec workflowMetadata(IoK8sApimachineryPkgApisMetaV1ObjectMeta workflowMetadata) {
    this.workflowMetadata = workflowMetadata;
    return this;
  }

   /**
   * WorkflowMetadata contains some metadata of the workflow to be run
   * @return workflowMetadata
  **/
  @ApiModelProperty(value = "WorkflowMetadata contains some metadata of the workflow to be run")
  public IoK8sApimachineryPkgApisMetaV1ObjectMeta getWorkflowMetadata() {
    return workflowMetadata;
  }

  public void setWorkflowMetadata(IoK8sApimachineryPkgApisMetaV1ObjectMeta workflowMetadata) {
    this.workflowMetadata = workflowMetadata;
  }

  public IoArgoprojWorkflowV1alpha1CronWorkflowSpec workflowSpec(IoArgoprojWorkflowV1alpha1WorkflowSpec workflowSpec) {
    this.workflowSpec = workflowSpec;
    return this;
  }

   /**
   * WorkflowSpec is the spec of the workflow to be run
   * @return workflowSpec
  **/
  @ApiModelProperty(required = true, value = "WorkflowSpec is the spec of the workflow to be run")
  public IoArgoprojWorkflowV1alpha1WorkflowSpec getWorkflowSpec() {
    return workflowSpec;
  }

  public void setWorkflowSpec(IoArgoprojWorkflowV1alpha1WorkflowSpec workflowSpec) {
    this.workflowSpec = workflowSpec;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1CronWorkflowSpec ioArgoprojWorkflowV1alpha1CronWorkflowSpec = (IoArgoprojWorkflowV1alpha1CronWorkflowSpec) o;
    return Objects.equals(this.concurrencyPolicy, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.concurrencyPolicy) &&
        Objects.equals(this.failedJobsHistoryLimit, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.failedJobsHistoryLimit) &&
        Objects.equals(this.schedule, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.schedule) &&
        Objects.equals(this.startingDeadlineSeconds, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.startingDeadlineSeconds) &&
        Objects.equals(this.successfulJobsHistoryLimit, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.successfulJobsHistoryLimit) &&
        Objects.equals(this.suspend, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.suspend) &&
        Objects.equals(this.timezone, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.timezone) &&
        Objects.equals(this.workflowMetadata, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.workflowMetadata) &&
        Objects.equals(this.workflowSpec, ioArgoprojWorkflowV1alpha1CronWorkflowSpec.workflowSpec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(concurrencyPolicy, failedJobsHistoryLimit, schedule, startingDeadlineSeconds, successfulJobsHistoryLimit, suspend, timezone, workflowMetadata, workflowSpec);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1CronWorkflowSpec {\n");
    
    sb.append("    concurrencyPolicy: ").append(toIndentedString(concurrencyPolicy)).append("\n");
    sb.append("    failedJobsHistoryLimit: ").append(toIndentedString(failedJobsHistoryLimit)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    startingDeadlineSeconds: ").append(toIndentedString(startingDeadlineSeconds)).append("\n");
    sb.append("    successfulJobsHistoryLimit: ").append(toIndentedString(successfulJobsHistoryLimit)).append("\n");
    sb.append("    suspend: ").append(toIndentedString(suspend)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    workflowMetadata: ").append(toIndentedString(workflowMetadata)).append("\n");
    sb.append("    workflowSpec: ").append(toIndentedString(workflowSpec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

