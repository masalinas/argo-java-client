/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/release-3.5/
 *
 * OpenAPI spec version: VERSION
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.oferto.argo.client.api;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.oferto.argo.client.ApiCallback;
import io.oferto.argo.client.ApiClient;
import io.oferto.argo.client.ApiException;
import io.oferto.argo.client.ApiResponse;
import io.oferto.argo.client.Configuration;
import io.oferto.argo.client.Pair;
import io.oferto.argo.client.ProgressRequestBody;
import io.oferto.argo.client.ProgressResponseBody;
import io.oferto.argo.client.model.GrpcGatewayRuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArtifactServiceApi {
    private ApiClient apiClient;

    public ArtifactServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArtifactServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for artifactServiceGetArtifactFile
     * @param namespace  (required)
     * @param idDiscriminator  (required)
     * @param id  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param artifactDiscriminator  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call artifactServiceGetArtifactFileCall(String namespace, String idDiscriminator, String id, String nodeId, String artifactName, String artifactDiscriminator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifact-files/{namespace}/{idDiscriminator}/{id}/{nodeId}/{artifactDiscriminator}/{artifactName}"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "idDiscriminator" + "\\}", apiClient.escapeString(idDiscriminator.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "artifactName" + "\\}", apiClient.escapeString(artifactName.toString()))
            .replaceAll("\\{" + "artifactDiscriminator" + "\\}", apiClient.escapeString(artifactDiscriminator.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call artifactServiceGetArtifactFileValidateBeforeCall(String namespace, String idDiscriminator, String id, String nodeId, String artifactName, String artifactDiscriminator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling artifactServiceGetArtifactFile(Async)");
        }
        
        // verify the required parameter 'idDiscriminator' is set
        if (idDiscriminator == null) {
            throw new ApiException("Missing the required parameter 'idDiscriminator' when calling artifactServiceGetArtifactFile(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling artifactServiceGetArtifactFile(Async)");
        }
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling artifactServiceGetArtifactFile(Async)");
        }
        
        // verify the required parameter 'artifactName' is set
        if (artifactName == null) {
            throw new ApiException("Missing the required parameter 'artifactName' when calling artifactServiceGetArtifactFile(Async)");
        }
        
        // verify the required parameter 'artifactDiscriminator' is set
        if (artifactDiscriminator == null) {
            throw new ApiException("Missing the required parameter 'artifactDiscriminator' when calling artifactServiceGetArtifactFile(Async)");
        }
        

        com.squareup.okhttp.Call call = artifactServiceGetArtifactFileCall(namespace, idDiscriminator, id, nodeId, artifactName, artifactDiscriminator, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an artifact.
     * 
     * @param namespace  (required)
     * @param idDiscriminator  (required)
     * @param id  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param artifactDiscriminator  (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] artifactServiceGetArtifactFile(String namespace, String idDiscriminator, String id, String nodeId, String artifactName, String artifactDiscriminator) throws ApiException {
        ApiResponse<byte[]> resp = artifactServiceGetArtifactFileWithHttpInfo(namespace, idDiscriminator, id, nodeId, artifactName, artifactDiscriminator);
        return resp.getData();
    }

    /**
     * Get an artifact.
     * 
     * @param namespace  (required)
     * @param idDiscriminator  (required)
     * @param id  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param artifactDiscriminator  (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> artifactServiceGetArtifactFileWithHttpInfo(String namespace, String idDiscriminator, String id, String nodeId, String artifactName, String artifactDiscriminator) throws ApiException {
        com.squareup.okhttp.Call call = artifactServiceGetArtifactFileValidateBeforeCall(namespace, idDiscriminator, id, nodeId, artifactName, artifactDiscriminator, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an artifact. (asynchronously)
     * 
     * @param namespace  (required)
     * @param idDiscriminator  (required)
     * @param id  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param artifactDiscriminator  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call artifactServiceGetArtifactFileAsync(String namespace, String idDiscriminator, String id, String nodeId, String artifactName, String artifactDiscriminator, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = artifactServiceGetArtifactFileValidateBeforeCall(namespace, idDiscriminator, id, nodeId, artifactName, artifactDiscriminator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for artifactServiceGetInputArtifact
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call artifactServiceGetInputArtifactCall(String namespace, String name, String nodeId, String artifactName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/input-artifacts/{namespace}/{name}/{nodeId}/{artifactName}"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "artifactName" + "\\}", apiClient.escapeString(artifactName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call artifactServiceGetInputArtifactValidateBeforeCall(String namespace, String name, String nodeId, String artifactName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling artifactServiceGetInputArtifact(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling artifactServiceGetInputArtifact(Async)");
        }
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling artifactServiceGetInputArtifact(Async)");
        }
        
        // verify the required parameter 'artifactName' is set
        if (artifactName == null) {
            throw new ApiException("Missing the required parameter 'artifactName' when calling artifactServiceGetInputArtifact(Async)");
        }
        

        com.squareup.okhttp.Call call = artifactServiceGetInputArtifactCall(namespace, name, nodeId, artifactName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an input artifact.
     * 
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] artifactServiceGetInputArtifact(String namespace, String name, String nodeId, String artifactName) throws ApiException {
        ApiResponse<byte[]> resp = artifactServiceGetInputArtifactWithHttpInfo(namespace, name, nodeId, artifactName);
        return resp.getData();
    }

    /**
     * Get an input artifact.
     * 
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> artifactServiceGetInputArtifactWithHttpInfo(String namespace, String name, String nodeId, String artifactName) throws ApiException {
        com.squareup.okhttp.Call call = artifactServiceGetInputArtifactValidateBeforeCall(namespace, name, nodeId, artifactName, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an input artifact. (asynchronously)
     * 
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call artifactServiceGetInputArtifactAsync(String namespace, String name, String nodeId, String artifactName, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = artifactServiceGetInputArtifactValidateBeforeCall(namespace, name, nodeId, artifactName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for artifactServiceGetInputArtifactByUID
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call artifactServiceGetInputArtifactByUIDCall(String uid, String nodeId, String artifactName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/input-artifacts-by-uid/{uid}/{nodeId}/{artifactName}"
            .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(uid.toString()))
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "artifactName" + "\\}", apiClient.escapeString(artifactName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call artifactServiceGetInputArtifactByUIDValidateBeforeCall(String uid, String nodeId, String artifactName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling artifactServiceGetInputArtifactByUID(Async)");
        }
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling artifactServiceGetInputArtifactByUID(Async)");
        }
        
        // verify the required parameter 'artifactName' is set
        if (artifactName == null) {
            throw new ApiException("Missing the required parameter 'artifactName' when calling artifactServiceGetInputArtifactByUID(Async)");
        }
        

        com.squareup.okhttp.Call call = artifactServiceGetInputArtifactByUIDCall(uid, nodeId, artifactName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an input artifact by UID.
     * 
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] artifactServiceGetInputArtifactByUID(String uid, String nodeId, String artifactName) throws ApiException {
        ApiResponse<byte[]> resp = artifactServiceGetInputArtifactByUIDWithHttpInfo(uid, nodeId, artifactName);
        return resp.getData();
    }

    /**
     * Get an input artifact by UID.
     * 
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> artifactServiceGetInputArtifactByUIDWithHttpInfo(String uid, String nodeId, String artifactName) throws ApiException {
        com.squareup.okhttp.Call call = artifactServiceGetInputArtifactByUIDValidateBeforeCall(uid, nodeId, artifactName, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an input artifact by UID. (asynchronously)
     * 
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call artifactServiceGetInputArtifactByUIDAsync(String uid, String nodeId, String artifactName, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = artifactServiceGetInputArtifactByUIDValidateBeforeCall(uid, nodeId, artifactName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for artifactServiceGetOutputArtifact
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call artifactServiceGetOutputArtifactCall(String namespace, String name, String nodeId, String artifactName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifacts/{namespace}/{name}/{nodeId}/{artifactName}"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "artifactName" + "\\}", apiClient.escapeString(artifactName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call artifactServiceGetOutputArtifactValidateBeforeCall(String namespace, String name, String nodeId, String artifactName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling artifactServiceGetOutputArtifact(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling artifactServiceGetOutputArtifact(Async)");
        }
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling artifactServiceGetOutputArtifact(Async)");
        }
        
        // verify the required parameter 'artifactName' is set
        if (artifactName == null) {
            throw new ApiException("Missing the required parameter 'artifactName' when calling artifactServiceGetOutputArtifact(Async)");
        }
        

        com.squareup.okhttp.Call call = artifactServiceGetOutputArtifactCall(namespace, name, nodeId, artifactName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an output artifact.
     * 
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] artifactServiceGetOutputArtifact(String namespace, String name, String nodeId, String artifactName) throws ApiException {
        ApiResponse<byte[]> resp = artifactServiceGetOutputArtifactWithHttpInfo(namespace, name, nodeId, artifactName);
        return resp.getData();
    }

    /**
     * Get an output artifact.
     * 
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> artifactServiceGetOutputArtifactWithHttpInfo(String namespace, String name, String nodeId, String artifactName) throws ApiException {
        com.squareup.okhttp.Call call = artifactServiceGetOutputArtifactValidateBeforeCall(namespace, name, nodeId, artifactName, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an output artifact. (asynchronously)
     * 
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call artifactServiceGetOutputArtifactAsync(String namespace, String name, String nodeId, String artifactName, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = artifactServiceGetOutputArtifactValidateBeforeCall(namespace, name, nodeId, artifactName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for artifactServiceGetOutputArtifactByUID
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call artifactServiceGetOutputArtifactByUIDCall(String uid, String nodeId, String artifactName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifacts-by-uid/{uid}/{nodeId}/{artifactName}"
            .replaceAll("\\{" + "uid" + "\\}", apiClient.escapeString(uid.toString()))
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "artifactName" + "\\}", apiClient.escapeString(artifactName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call artifactServiceGetOutputArtifactByUIDValidateBeforeCall(String uid, String nodeId, String artifactName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling artifactServiceGetOutputArtifactByUID(Async)");
        }
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling artifactServiceGetOutputArtifactByUID(Async)");
        }
        
        // verify the required parameter 'artifactName' is set
        if (artifactName == null) {
            throw new ApiException("Missing the required parameter 'artifactName' when calling artifactServiceGetOutputArtifactByUID(Async)");
        }
        

        com.squareup.okhttp.Call call = artifactServiceGetOutputArtifactByUIDCall(uid, nodeId, artifactName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get an output artifact by UID.
     * 
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] artifactServiceGetOutputArtifactByUID(String uid, String nodeId, String artifactName) throws ApiException {
        ApiResponse<byte[]> resp = artifactServiceGetOutputArtifactByUIDWithHttpInfo(uid, nodeId, artifactName);
        return resp.getData();
    }

    /**
     * Get an output artifact by UID.
     * 
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> artifactServiceGetOutputArtifactByUIDWithHttpInfo(String uid, String nodeId, String artifactName) throws ApiException {
        com.squareup.okhttp.Call call = artifactServiceGetOutputArtifactByUIDValidateBeforeCall(uid, nodeId, artifactName, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an output artifact by UID. (asynchronously)
     * 
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call artifactServiceGetOutputArtifactByUIDAsync(String uid, String nodeId, String artifactName, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = artifactServiceGetOutputArtifactByUIDValidateBeforeCall(uid, nodeId, artifactName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
